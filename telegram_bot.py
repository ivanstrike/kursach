import os
import logging
import traceback
from typing import Optional, List, Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    filters, ContextTypes
)
import asyncio

from perfume_bot import PerfumeBot
from voice_processor import VoiceProcessor
from config import TELEGRAM_TOKEN, VOICE_CONFIG
from perfumes_data import PERFUMES_CATALOG

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramPerfumeBot:
    """Telegram-–æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è PerfumeBot —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–∫—Å—Ç–∞ –∏ –≥–æ–ª–æ—Å–∞"""

    def __init__(self, token: str):
        self.token = token
        self.perfume_bot = PerfumeBot()
        self.voice_processor = VoiceProcessor(language=VOICE_CONFIG['language'])
        self.user_sessions = {}

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"""
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "–î—Ä—É–≥"
        welcome_message = f"""
**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —ç–ª–∏—Ç–Ω—ã—Ö –∞—Ä–æ–º–∞—Ç–æ–≤, {username}!**

–Ø –ê—Ä–æ–º–∞—Ç–ë–æ—Ç - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø–∞—Ä—Ñ—é–º–µ—Ä–∏–∏!

**–ß—Ç–æ —è —É–º–µ—é:**
–ü–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–π –∞—Ä–æ–º–∞—Ç
–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã –∏ –∞–∫—Ü–∏–∏
–ü–æ–º–æ—á—å —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
–†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
–†–∞–±–æ—Ç–∞—Ç—å —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

**–ö–æ–º–∞–Ω–¥—ã:**
/catalog - –ø–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥
/prices - —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã
/help - —Å–ø—Ä–∞–≤–∫–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üé§
        """
        await update.message.reply_text(welcome_message, parse_mode='Markdown')

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        help_text = """
**–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /catalog - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∞—Ä–æ–º–∞—Ç–æ–≤
‚Ä¢ /prices - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ü–µ–Ω—ã
‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1Ô∏è –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ –∏—â–µ—Ç–µ: "–ù—É–∂–µ–Ω –º—É–∂—Å–∫–æ–π –∞—Ä–æ–º–∞—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã"
2Ô∏è –°–ø—Ä–æ—Å–∏—Ç–µ –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –±—Ä–µ–Ω–¥–µ: "–ß—Ç–æ –µ—Å—Ç—å –æ—Ç Chanel?"
3Ô∏è –£—Ç–æ—á–Ω–∏—Ç–µ —Ü–µ–Ω—ã: "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç Dior Sauvage?"
4Ô∏è –ü–æ–ø—Ä–æ—Å–∏—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é: "–ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-—Ç–æ –¥–ª—è —Å–≤–∏–¥–∞–Ω–∏—è"

**–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:**
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–º!

**–ü–æ–∫—É–ø–∫–∞:**
–ö–æ–≥–¥–∞ –Ω–∞–π–¥–µ—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞—Ä–æ–º–∞—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ "–∫—É–ø–∏—Ç—å" –∏ —è –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑!

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã? –ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ!
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–∫–∏"""
        response = self.perfume_bot.process_message("–ø–æ–∫–∞–∂–∏ –∫–∞—Ç–∞–ª–æ–≥", str(update.effective_user.id))
        found_perfumes = self._find_perfumes_in_response(response)
        keyboard = self._make_perfume_keyboard(found_perfumes)
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)

    async def prices_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–∫—É–ø–∫–∏"""
        response = self.perfume_bot.process_message("—Ü–µ–Ω—ã", str(update.effective_user.id))
        found_perfumes = self._find_perfumes_in_response(response)
        keyboard = self._make_perfume_keyboard(found_perfumes)
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)

    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
        stats = self.perfume_bot.get_stats()
        total = sum(stats.values())
        if total > 0:
            stats_text = f"""
 **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:**

–û—Ç–≤–µ—Ç–æ–≤ –ø–æ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º: {stats['intent']} ({stats['intent']/total*100:.1f}%)
–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {stats['generate']} ({stats['generate']/total*100:.1f}%)
–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['failure']} ({stats['failure']/total*100:.1f}%)

 –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}
            """
        else:
            stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞. –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥!"

        await update.message.reply_text(stats_text, parse_mode='Markdown')

    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(update.effective_user.id)
        user_message = update.message.text
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
        response = self.perfume_bot.process_message(user_message, user_id)
        found_perfumes = self._find_perfumes_in_response(response)
        keyboard = self._make_perfume_keyboard(found_perfumes)
        await update.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)
        logger.info(f"User {user_id}: {user_message}")
        logger.info(f"Bot response: {response[:100]}...")

    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = str(update.effective_user.id)
        try:
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
            voice = update.message.voice
            voice_file = await context.bot.get_file(voice.file_id)
            voice_data = await voice_file.download_as_bytearray()
            recognized_text, status = self.voice_processor.recognize_speech_from_audio(bytes(voice_data), input_format='ogg')
            if status != "success":
                await update.message.reply_text(f"{status}")
                return
            if not recognized_text:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
            response = self.perfume_bot.process_message(recognized_text, user_id)
            voice_response, voice_status = self.voice_processor.text_to_speech(response)
            found_perfumes = self._find_perfumes_in_response(response)
            keyboard = self._make_perfume_keyboard(found_perfumes, use_slug=True)
            if voice_status == "success" and voice_response:
                if keyboard:
                    await update.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)
                await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='record_voice')
                await context.bot.send_voice(
                    chat_id=update.effective_chat.id,
                    voice=voice_response
                )
            else:
                await update.message.reply_text(response, parse_mode='Markdown', reply_markup=keyboard)
                if voice_status != "success":
                    await update.message.reply_text(f" –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç: {voice_status}")
            logger.info(f"Voice message from {user_id}: {recognized_text}")
        except Exception as e:
            logger.error(f"Error processing voice message: {e}\n{traceback.format_exc()}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        if update and update.message:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )

    def run(self):
        """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
        if not self.token or self.token == "YOUR_TELEGRAM_BOT_TOKEN_HERE":
            print("–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞!")
            print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ config.py")
            return
        app = Application.builder().token(self.token).build()
        app.add_handler(CommandHandler("start", self.start_command))
        app.add_handler(CommandHandler("help", self.help_command))
        app.add_handler(CommandHandler("catalog", self.catalog_command))
        app.add_handler(CommandHandler("prices", self.prices_command))
        app.add_handler(CommandHandler("stats", self.stats_command))
        app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        app.add_handler(MessageHandler(filters.VOICE, self.handle_voice_message))
        app.add_error_handler(self.error_handler)
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        print("–°—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞: https://t.me/your_perfumer_bot")
        app.run_polling(drop_pending_updates=True)

    def _find_perfumes_in_response(self, response: str) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —É–ø–æ–º—è–Ω—É—Ç—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ –ø–∞—Ä—Ñ—é–º–æ–≤ –ø–æ –∏–º–µ–Ω–∏"""
        found = []
        for perfume in PERFUMES_CATALOG.values():
            if perfume['name'] in response:
                found.append(perfume)
        return found

    def _make_perfume_keyboard(self, perfumes: List[Dict[str, Any]], use_slug: bool = False) -> Optional[InlineKeyboardMarkup]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–∞—Ä—Ñ—é–º–∞"""
        if not perfumes:
            return None
        buttons = []
        for perfume in perfumes:
            url = perfume['url']
            if use_slug:
                url = self._make_slug(perfume['brand'], perfume['name'])
                url = f"https://randewoo.ru/product/{url}"
            else:
                url = f"https://randewoo.ru/product/{url}"
            buttons.append(InlineKeyboardButton(
                f"–ö—É–ø–∏—Ç—å {perfume['name']}",
                url=url
            ))
        return InlineKeyboardMarkup([buttons])

    def _make_slug(self, brand: str, name: str) -> str:
        import re
        slug = f"{brand} {name}".lower()
        slug = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø ]', '', slug)
        slug = slug.replace('—ë', 'e').replace('–π', 'i')
        slug = slug.replace(' ', '-')
        return slug

def main():
    try:
        bot = TelegramPerfumeBot(TELEGRAM_TOKEN)
        bot.run()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()

if __name__ == "__main__":
    main()
